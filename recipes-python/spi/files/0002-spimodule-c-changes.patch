Index: src/spimodule.c
===================================================================
--- src.orig/spimodule.c	2009-12-19 17:26:28.000000000 -0800
+++ src/spimodule.c	2013-11-29 14:18:56.110969086 -0800
@@ -91,9 +91,11 @@
 }
 
 #define MAXPATH 16
+// DAW - 8/12/12 - increased buffer size from 32 to 1024 bytes
+#define MAXMSGLEN 1024
 
 static char *wrmsg = "Argument must be a list of at least one, "
-				"but not more than 32 integers";
+				"but not more than 1024 integers";
 
 PyDoc_STRVAR(SPI_write_doc,
 	"write([values]) -> None\n\n"
@@ -104,7 +106,7 @@
 {
 	int		status;
 	uint8_t	ii, len;
-	uint8_t	buf[32];
+	uint8_t	buf[MAXMSGLEN];
 	PyObject	*list;
 
 	if (!PyArg_ParseTuple(args, "O:write", &list))
@@ -115,7 +117,7 @@
 		return NULL;
 	}
 
-	if ((len = PyList_GET_SIZE(list)) >  32) {
+	if ((len = PyList_GET_SIZE(list)) >  MAXMSGLEN) {
 		PyErr_SetString(PyExc_OverflowError, wrmsg);
 		return NULL;
 	}
@@ -152,14 +154,14 @@
 static PyObject *
 SPI_readbytes(SPI *self, PyObject *args)
 {
-	uint8_t	rxbuf[32];
-	int		addr, status, len, ii;
+	uint8_t	rxbuf[MAXMSGLEN];
+	int		status, len, ii;
 	PyObject	*list;
 
 	if (!PyArg_ParseTuple(args, "i:read", &len))
 		return NULL;
 
-	/* read at least 1 byte, no more than 32 */
+	/* read at least 1 byte, no more than 1024 */
 	if (len < 1)
 		len = 1;
 	else if (len > sizeof(rxbuf))
@@ -201,7 +203,7 @@
 	uint8_t ii, len;
 	int status;
 	int delay = -1;
-	uint8_t ret = 0;
+	//uint8_t ret = 0;
 	PyObject *list;
 	struct spi_ioc_transfer *xferptr;
 	uint8_t *txbuf, *rxbuf;
@@ -214,7 +216,7 @@
 		return NULL;
 	}
 
-	if ((len = PyList_GET_SIZE(list)) > 32) {
+	if ((len = PyList_GET_SIZE(list)) > MAXMSGLEN) {
 		PyErr_SetString(PyExc_OverflowError, wrmsg);
 		return NULL;
 	}
@@ -276,7 +278,7 @@
 SPI_xfer2(SPI *self, PyObject *args)
 {
 	static char *msg = "Argument must be a list of at least one, "
-				"but not more than 32 integers";
+				"but not more than 1024 integers";
 	int status;	
 	uint8_t ii, len;
 	PyObject *list;
@@ -291,7 +293,7 @@
 		return NULL;
 	}
 
-	if ((len = PyList_GET_SIZE(list)) > 32) {
+	if ((len = PyList_GET_SIZE(list)) > MAXMSGLEN) {
 		PyErr_SetString(PyExc_OverflowError, wrmsg);
 		return NULL;
 	}
@@ -339,7 +341,7 @@
 
 static int __SPI_set_mode( int fd, __u8 mode) {
 	__u8 test;
-	printf("setmode called with mode = %x\n", mode);
+	//printf("setmode called with mode = %x\n", mode);
 	if (ioctl(fd, SPI_IOC_WR_MODE, &mode) == -1) {
 		PyErr_SetFromErrno(PyExc_IOError);
 		return -1;
@@ -450,7 +452,7 @@
 	__SPI_set_mode(self->fd, tmp);
 
 	self->mode = tmp;
-	printf("mode now: %x\n", self->mode);
+	//printf("mode now: %x\n", self->mode);
 	return 0;
 }
 
@@ -478,7 +480,7 @@
 	__SPI_set_mode(self->fd, tmp);
 
 	self->mode = tmp;
-	printf("mode now: %x\n", self->mode);
+	//printf("mode now: %x\n", self->mode);
 	return 0;
 }
 
@@ -506,7 +508,7 @@
 	__SPI_set_mode(self->fd, tmp);
 
 	self->mode = tmp;
-	printf("mode now: %x\n", self->mode);
+	//printf("mode now: %x\n", self->mode);
 	return 0;
 }
 
@@ -534,7 +536,7 @@
 	__SPI_set_mode(self->fd, tmp);
 
 	self->mode = tmp;
-	printf("mode now: %x\n", self->mode);
+	//printf("mode now: %x\n", self->mode);
 	return 0;
 }
 
@@ -562,7 +564,7 @@
 	__SPI_set_mode(self->fd, tmp);
 
 	self->mode = tmp;
-	printf("mode now: %x\n", self->mode);
+	//printf("mode now: %x\n", self->mode);
 	return 0;
 }
 
@@ -633,11 +635,12 @@
 	}
 
 	msh = PyInt_AsLong(val);
-	if (8000000 < msh) {
-		PyErr_SetString(PyExc_TypeError,
-			"The mode attribute must be an integer < 8000000.");
-		return -1;
-	}
+	// DAW - 8/12/12 - removed limitation on SPI speed
+	// if (8000000 < msh) {
+		// PyErr_SetString(PyExc_TypeError,
+			// "The mode attribute must be an integer < 8000000.");
+		// return -1;
+	// }
 
 	if (self->msh != msh) {
 		if (ioctl(self->fd, SPI_IOC_WR_MAX_SPEED_HZ, &msh) == -1) {
